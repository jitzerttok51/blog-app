buildscript {
    logger.lifecycle( "Java home: ${System.getProperty('java.home')}")
    logger.lifecycle( "Java version: ${System.getProperty('java.version')}")
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.github.node-gradle.node" version "3.5.1"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

String msrVersion = {
    String major = project.property 'build.version.major'
    String minor = project.property 'build.version.minor'
    String build = project.property 'build.number'

    "$major.$minor.$build"
}()

bootJar {
    manifest.attributes (
            'Implementation-Version': "$msrVersion"
    )
}

springBoot {
    mainClass = 'com.example.blog.BlogAppApplication'
    buildInfo {
        version = msrVersion
    }
}

group = 'com.example'
version = msrVersion
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.passay:passay:1.6.2'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:testcontainers:1.17.6'
    testImplementation  'org.testcontainers:postgresql:1.17.6'
}

tasks.named('test') {
    useJUnitPlatform()
}

String frontendProjectDir = "${project.projectDir}/frontend"
String frontendBuildDir = "${buildDir}/resources/main/frontend"

node {
    nodeProjectDir = file(frontendProjectDir)
}

task ngBuild(type: NpxTask) {
    dependsOn npmInstall
    command = 'ng'

    args = ['build', '--c=production', "--output-path=${frontendBuildDir}"]
    inputs.dir(frontendProjectDir)
    outputs.dir(frontendBuildDir)
}

tasks.processResources.dependsOn 'ngBuild'

task ngServe(type: NpxTask) {
    dependsOn npmInstall
    command = 'ng'

    args = ['serve']
    inputs.dir(frontendProjectDir)
}
